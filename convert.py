from PIL import Image, ImageDraw
import time

timeStart = time.time()

# Invert the image (0=False, 1=True)
inverted = 0

# Name of the ASCII file
filename = 'test.txt'

# Name of the output img
output = "image.txt"

def create_pixel_art():
    # Set the width and height of each cell
    cell_width = 2
    cell_height = 4

    # Calculate the total width and height of the image
    image_width = cell_width * len(lines[0])
    image_height = cell_height * len(lines)

    # Create a new image with a white background
    image = Image.new("RGB", (image_width, image_height), "white")
    draw = ImageDraw.Draw(image)

    # Define colors for key (black) and value (white)
    black = (0, 0, 0)  # Black
    white = (255, 255, 255)  # White

    canvasLines = {}
    lineNo = 0
    # Loop through data and format a dictionary for black/white pixels
    for line in lines:
        # Set the lines as empty lists
        for x in range(0,4):
            canvasLines[lineNo + x] = []

        # Fill in the lines numbers 4 at a time
        for ascii in line:
            for x in range(0,4):
                
                # If an ascii character
                # print(f"canvasLines[{lineNo}+{x}].extend(colorMatrices[{ascii}{x}])")
                canvasLines[lineNo + x].extend(colorMatrices[ascii][x])
        lineNo += 4

    # Print the image from the dict
    for y in range(0,len(canvasLines)):
        for x in range(0,len(canvasLines[0])):
            # If inverted, make the points black, else white
            # print(canvasLines[y])
            print(f"if canvasLines[{y}][{x}] == inverted")
            if canvasLines[y][x] == inverted:
                draw.point((x,y), black)
            else:
                draw.point((x,y), white)
    # Save the image as a JPEG file
    image.save(output)

lines = []  # Initialize an empty array to store lines

# Find the length of the longest line
with open(filename, 'r', encoding='utf-8') as file:
    lines = file.readlines()
    max_len = len(max(lines, key=len))
    print(max_len)
    lines = []
    file.close()

# Open the file in read mode to collect data
with open('test.txt', 'r', encoding='utf-8') as file:
    # Read each line and add it to the 'lines' array
    for line in file:
        paddedLine = line.ljust(max_len-1)
        print(paddedLine.replace('\n',''))
        lines.append(line.replace('\n',''))  # Remove leading and trailing whitespaces

colorMatrices = {
    # Braille Characters
    '⠀': [ [0, 0], [0, 0], [0, 0], [0, 0]],
    ' ': [ [0, 0], [0, 0], [0, 0], [0, 0]], 
    '⠁': [ [1, 0], [0, 0], [0, 0], [0, 0]], 
    '⠂': [ [0, 0], [1, 0], [0, 0], [0, 0]], 
    '⠃': [ [1, 0], [1, 0], [0, 0], [0, 0]], 
    '⠄': [ [0, 0], [0, 0], [1, 0], [0, 0]], 
    '⠅': [ [1, 0], [0, 0], [1, 0], [0, 0]], 
    '⠆': [ [0, 0], [1, 0], [1, 0], [0, 0]], 
    '⠇': [ [1, 0], [1, 0], [1, 0], [0, 0]], 
    '⡀': [ [0, 0], [0, 0], [0, 0], [1, 0]], 
    '⡁': [ [1, 0], [0, 0], [0, 0], [1, 0]], 
    '⡂': [ [0, 0], [1, 0], [0, 0], [1, 0]], 
    '⡃': [ [1, 0], [1, 0], [0, 0], [1, 0]], 
    '⡄': [ [0, 0], [0, 0], [1, 0], [1, 0]], 
    '⡅': [ [1, 0], [0, 0], [1, 0], [1, 0]], 
    '⡆': [ [0, 0], [1, 0], [1, 0], [1, 0]], 
    '⡇': [ [1, 0], [1, 0], [1, 0], [1, 0]], 
    '⠈': [ [0, 1], [0, 0], [0, 0], [0, 0]], 
    '⠉': [ [1, 1], [0, 0], [0, 0], [0, 0]],
    '⠊': [ [0, 1], [1, 0], [0, 0], [0, 0]],
    '⠋': [ [1, 1], [1, 0], [0, 0], [0, 0]],
    '⠌': [ [0, 1], [0, 0], [1, 0], [0, 0]],
    '⠍': [ [1, 1], [0, 0], [1, 0], [0, 0]],
    '⠎': [ [0, 1], [1, 0], [1, 0], [0, 0]],
    '⠏': [ [1, 1], [1, 0], [1, 0], [0, 0]],
    '⡈': [ [0, 1], [0, 0], [0, 0], [1, 0]],
    '⡉': [ [1, 1], [0, 0], [0, 0], [1, 0]],
    '⡊': [ [0, 1], [1, 0], [0, 0], [1, 0]],
    '⡋': [ [1, 1], [1, 0], [0, 0], [1, 0]],
    '⡌': [ [0, 1], [0, 0], [1, 0], [1, 0]],
    '⡍': [ [1, 1], [0, 0], [1, 0], [1, 0]],
    '⡎': [ [0, 1], [1, 0], [1, 0], [1, 0]],
    '⡏': [ [1, 1], [1, 0], [1, 0], [1, 0]],
    '⠐': [ [0, 0], [0, 1], [0, 0], [0, 0]],
    '⠑': [ [1, 0], [0, 1], [0, 0], [0, 0]],
    '⠒': [ [0, 0], [1, 1], [0, 0], [0, 0]],
    '⠓': [ [1, 0], [1, 1], [0, 0], [0, 0]],
    '⠔': [ [0, 0], [0, 1], [1, 0], [0, 0]],
    '⠕': [ [1, 0], [0, 1], [1, 0], [0, 0]],
    '⠖': [ [0, 0], [1, 1], [1, 0], [0, 0]],
    '⠗': [ [1, 0], [1, 1], [1, 0], [0, 0]],
    '⡐': [ [0, 0], [0, 1], [0, 0], [1, 0]],
    '⡑': [ [1, 0], [0, 1], [0, 0], [1, 0]],
    '⡒': [ [0, 0], [1, 1], [0, 0], [1, 0]],
    '⡓': [ [1, 0], [1, 1], [0, 0], [1, 0]],
    '⡔': [ [0, 0], [0, 1], [1, 0], [1, 0]],
    '⡕': [ [1, 0], [0, 1], [1, 0], [1, 0]],
    '⡖': [ [0, 0], [1, 1], [1, 0], [1, 0]],
    '⡗': [ [1, 0], [1, 1], [1, 0], [1, 0]],
    '⠘': [ [0, 1], [0, 1], [0, 0], [0, 0]],
    '⠙': [ [1, 1], [0, 1], [0, 0], [0, 0]],
    '⠚': [ [0, 1], [1, 1], [0, 0], [0, 0]],
    '⠛': [ [1, 1], [1, 1], [0, 0], [0, 0]],
    '⠜': [ [0, 1], [0, 1], [1, 0], [0, 0]],
    '⠝': [ [1, 1], [0, 1], [1, 0], [0, 0]],
    '⠞': [ [0, 1], [1, 1], [1, 0], [0, 0]],
    '⠟': [ [1, 1], [1, 1], [1, 0], [0, 0]],
    '⡘': [ [0, 1], [0, 1], [0, 0], [1, 0]],
    '⡙': [ [1, 1], [0, 1], [0, 0], [1, 0]],
    '⡚': [ [0, 1], [1, 1], [0, 0], [1, 0]],
    '⡛': [ [1, 1], [1, 1], [0, 0], [1, 0]],
    '⡜': [ [0, 1], [0, 1], [1, 0], [1, 0]],
    '⡝': [ [1, 1], [0, 1], [1, 0], [1, 0]],
    '⡞': [ [0, 1], [1, 1], [1, 0], [1, 0]],
    '⡟': [ [1, 1], [1, 1], [1, 0], [1, 0]],
    '⠠': [ [0, 0], [0, 0], [0, 1], [0, 0]],
    '⠡': [ [1, 0], [0, 0], [0, 1], [0, 0]],
    '⠢': [ [0, 0], [1, 0], [0, 1], [0, 0]],
    '⠣': [ [1, 0], [1, 0], [0, 1], [0, 0]],
    '⠤': [ [0, 0], [0, 0], [1, 1], [0, 0]],
    '⠥': [ [1, 0], [0, 0], [1, 1], [0, 0]],
    '⠦': [ [0, 0], [1, 0], [1, 1], [0, 0]],
    '⠧': [ [1, 0], [1, 0], [1, 1], [0, 0]],
    '⡠': [ [0, 0], [0, 0], [0, 1], [1, 0]],
    '⡡': [ [1, 0], [0, 0], [0, 1], [1, 0]],
    '⡢': [ [0, 0], [1, 0], [0, 1], [1, 0]],
    '⡣': [ [1, 0], [1, 0], [0, 1], [1, 0]],
    '⡤': [ [0, 0], [0, 0], [1, 1], [1, 0]],
    '⡥': [ [1, 0], [0, 0], [1, 1], [1, 0]],
    '⡦': [ [0, 0], [1, 0], [1, 1], [1, 0]],
    '⡧': [ [1, 0], [1, 0], [1, 1], [1, 0]],
    '⠨': [ [0, 1], [0, 0], [0, 1], [0, 0]],
    '⠩': [ [1, 1], [0, 0], [0, 1], [0, 0]],
    '⠪': [ [0, 1], [1, 0], [0, 1], [0, 0]],
    '⠫': [ [1, 1], [1, 0], [0, 1], [0, 0]],
    '⠬': [ [0, 1], [0, 0], [1, 1], [0, 0]],
    '⠭': [ [1, 1], [0, 0], [1, 1], [0, 0]],
    '⠮': [ [0, 1], [1, 0], [1, 1], [0, 0]],
    '⠯': [ [1, 1], [1, 0], [1, 1], [0, 0]], 
    '⡨': [ [0, 1], [0, 0], [0, 1], [1, 0]],
    '⡩': [ [1, 1], [0, 0], [0, 1], [1, 0]],
    '⡪': [ [0, 1], [1, 0], [0, 1], [1, 0]],
    '⡫': [ [1, 1], [1, 0], [0, 1], [1, 0]],
    '⡬': [ [0, 1], [0, 0], [1, 1], [1, 0]],
    '⡭': [ [1, 1], [0, 0], [1, 1], [1, 0]],
    '⡮': [ [0, 1], [1, 0], [1, 1], [1, 0]],
    '⡯': [ [1, 1], [1, 0], [1, 1], [1, 0]],
    '⠰': [ [0, 0], [0, 1], [0, 1], [0, 0]],
    '⠱': [ [1, 0], [0, 1], [0, 1], [0, 0]],
    '⠲': [ [0, 0], [1, 1], [0, 1], [0, 0]],
    '⠳': [ [1, 0], [1, 1], [0, 1], [0, 0]],
    '⠴': [ [0, 0], [0, 1], [1, 1], [0, 0]],
    '⠵': [ [1, 0], [0, 1], [1, 1], [0, 0]],
    '⠶': [ [0, 0], [1, 1], [1, 1], [0, 0]],
    '⠷': [ [1, 0], [1, 1], [1, 1], [0, 0]],
    '⡰': [ [0, 0], [0, 1], [0, 1], [1, 0]],
    '⡱': [ [1, 0], [0, 1], [0, 1], [1, 0]],
    '⡲': [ [0, 0], [1, 1], [0, 1], [1, 0]],
    '⡳': [ [1, 0], [1, 1], [0, 1], [1, 0]],
    '⡴': [ [0, 0], [0, 1], [1, 1], [1, 0]],
    '⡵': [ [1, 0], [0, 1], [1, 1], [1, 0]],
    '⡶': [ [0, 0], [1, 1], [1, 1], [1, 0]],
    '⡷': [ [1, 0], [1, 1], [1, 1], [1, 0]],
    '⠸': [ [0, 1], [0, 1], [0, 1], [0, 0]],
    '⠹': [ [1, 1], [0, 1], [0, 1], [0, 0]],
    '⠺': [ [0, 1], [1, 1], [0, 1], [0, 0]],
    '⠻': [ [1, 1], [1, 1], [0, 1], [0, 0]],
    '⠼': [ [0, 1], [0, 1], [1, 1], [0, 0]],
    '⠽': [ [1, 1], [0, 1], [1, 1], [0, 0]],
    '⠾': [ [0, 1], [1, 1], [1, 1], [0, 0]],
    '⠿': [ [1, 1], [1, 1], [1, 1], [0, 0]],
    '⡸': [ [0, 1], [0, 1], [0, 1], [1, 0]],
    '⡹': [ [1, 1], [0, 1], [0, 1], [1, 0]],
    '⡺': [ [0, 1], [1, 1], [0, 1], [1, 0]],
    '⡻': [ [1, 1], [1, 1], [0, 1], [1, 0]],
    '⡼': [ [0, 1], [0, 1], [1, 1], [1, 0]],
    '⡽': [ [1, 1], [0, 1], [1, 1], [1, 0]],
    '⡾': [ [0, 1], [1, 1], [1, 1], [1, 0]],
    '⡿': [ [1, 1], [1, 1], [1, 1], [1, 0]],
    '⢀': [ [0, 0], [0, 0], [0, 0], [0, 1]],
    '⢁': [ [1, 0], [0, 0], [0, 0], [0, 1]],
    '⢂': [ [0, 0], [1, 0], [0, 0], [0, 1]],
    '⢃': [ [1, 0], [1, 0], [0, 0], [0, 1]],
    '⢄': [ [0, 0], [0, 0], [1, 0], [0, 1]],
    '⢅': [ [1, 0], [0, 0], [1, 0], [0, 1]],
    '⢆': [ [0, 0], [1, 0], [1, 0], [0, 1]],
    '⢇': [ [1, 0], [1, 0], [1, 0], [0, 1]],
    '⣀': [ [0, 0], [0, 0], [0, 0], [1, 1]],
    '⣁': [ [1, 0], [0, 0], [0, 0], [1, 1]],
    '⣂': [ [0, 0], [1, 0], [0, 0], [1, 1]],
    '⣃': [ [1, 0], [1, 0], [0, 0], [1, 1]],
    '⣄': [ [0, 0], [0, 0], [1, 0], [1, 1]],
    '⣅': [ [1, 0], [0, 0], [1, 0], [1, 1]],
    '⣆': [ [0, 0], [1, 0], [1, 0], [1, 1]],
    '⣇': [ [1, 0], [1, 0], [1, 0], [1, 1]],
    '⢈': [ [0, 1], [0, 0], [0, 0], [0, 1]],
    '⢉': [ [1, 1], [0, 0], [0, 0], [0, 1]],
    '⢊': [ [0, 1], [1, 0], [0, 0], [0, 1]],
    '⢋': [ [1, 1], [1, 0], [0, 0], [0, 1]],
    '⢌': [ [0, 1], [0, 0], [1, 0], [0, 1]],
    '⢍': [ [1, 1], [0, 0], [1, 0], [0, 1]],
    '⢎': [ [0, 1], [1, 0], [1, 0], [0, 1]],
    '⢏': [ [1, 1], [1, 0], [1, 0], [0, 1]],
    '⣈': [ [0, 1], [0, 0], [0, 0], [1, 1]],
    '⣉': [ [1, 1], [0, 0], [0, 0], [1, 1]],
    '⣊': [ [0, 1], [1, 0], [0, 0], [1, 1]],
    '⣋': [ [1, 1], [1, 0], [0, 0], [1, 1]],
    '⣌': [ [0, 1], [0, 0], [1, 0], [1, 1]],
    '⣍': [ [1, 1], [0, 0], [1, 0], [1, 1]],
    '⣎': [ [0, 1], [1, 0], [1, 0], [1, 1]],
    '⣏': [ [1, 1], [1, 0], [1, 0], [1, 1]],
    '⢐': [ [0, 0], [0, 1], [0, 0], [0, 1]],
    '⢑': [ [1, 0], [0, 1], [0, 0], [0, 1]],
    '⢒': [ [0, 0], [1, 1], [0, 0], [0, 1]],
    '⢓': [ [1, 0], [1, 1], [0, 0], [0, 1]],
    '⢔': [ [0, 0], [0, 1], [1, 0], [0, 1]],
    '⢕': [ [1, 0], [0, 1], [1, 0], [0, 1]], 
    '⢖': [ [0, 0], [1, 1], [1, 0], [0, 1]],
    '⢗': [ [1, 0], [1, 1], [1, 0], [0, 1]],
    '⣐': [ [0, 0], [0, 1], [0, 0], [1, 1]],
    '⣑': [ [1, 0], [0, 1], [0, 0], [1, 1]],
    '⣒': [ [0, 0], [1, 1], [0, 0], [1, 1]],
    '⣓': [ [1, 0], [1, 1], [0, 0], [1, 1]],
    '⣔': [ [0, 0], [0, 1], [1, 0], [1, 1]],
    '⣕': [ [1, 0], [0, 1], [1, 0], [1, 1]],
    '⣖': [ [0, 0], [1, 1], [1, 0], [1, 1]],
    '⣗': [ [1, 0], [1, 1], [1, 0], [1, 1]],
    '⢘': [ [0, 1], [0, 1], [0, 0], [0, 1]],
    '⢙': [ [1, 1], [0, 1], [0, 0], [0, 1]],
    '⢚': [ [0, 1], [1, 1], [0, 0], [0, 1]],
    '⢛': [ [1, 1], [1, 1], [0, 0], [0, 1]],
    '⢜': [ [0, 1], [0, 1], [1, 0], [0, 1]],
    '⢝': [ [1, 1], [0, 1], [1, 0], [0, 1]],
    '⢞': [ [0, 1], [1, 1], [1, 0], [0, 1]],
    '⢟': [ [1, 1], [1, 1], [1, 0], [0, 1]],
    '⣘': [ [0, 1], [0, 1], [0, 0], [1, 1]],
    '⣙': [ [1, 1], [0, 1], [0, 0], [1, 1]],
    '⣚': [ [0, 1], [1, 1], [0, 0], [1, 1]],
    '⣛': [ [1, 1], [1, 1], [0, 0], [1, 1]],
    '⣜': [ [0, 1], [0, 1], [1, 0], [1, 1]],
    '⣝': [ [1, 1], [0, 1], [1, 0], [1, 1]],
    '⣞': [ [0, 1], [1, 1], [1, 0], [1, 1]],
    '⣟': [ [1, 1], [1, 1], [1, 0], [1, 1]],
    '⢠': [ [0, 0], [0, 0], [0, 1], [0, 1]],
    '⢡': [ [1, 0], [0, 0], [0, 1], [0, 1]],
    '⢢': [ [0, 0], [1, 0], [0, 1], [0, 1]],
    '⢣': [ [1, 0], [1, 0], [0, 1], [0, 1]],
    '⢤': [ [0, 0], [0, 0], [1, 1], [0, 1]],
    '⢥': [ [1, 0], [0, 0], [1, 1], [0, 1]],
    '⢦': [ [0, 0], [1, 0], [1, 1], [0, 1]],
    '⢧': [ [1, 0], [1, 0], [1, 1], [0, 1]],
    '⣠': [ [0, 0], [0, 0], [0, 1], [1, 1]],
    '⣡': [ [1, 0], [0, 0], [0, 1], [1, 1]],
    '⣢': [ [0, 0], [1, 0], [0, 1], [1, 1]],
    '⣣': [ [1, 0], [1, 0], [0, 1], [1, 1]],
    '⣤': [ [0, 0], [0, 0], [1, 1], [1, 1]],
    '⣥': [ [1, 0], [0, 0], [1, 1], [1, 1]],
    '⣦': [ [0, 0], [1, 0], [1, 1], [1, 1]],
    '⣧': [ [1, 0], [1, 0], [1, 1], [1, 1]],
    '⢨': [ [0, 1], [0, 0], [0, 1], [0, 1]],
    '⢩': [ [1, 1], [0, 0], [0, 1], [0, 1]],
    '⢪': [ [0, 1], [1, 0], [0, 1], [0, 1]],
    '⢫': [ [1, 1], [1, 0], [0, 1], [0, 1]],
    '⢬': [ [0, 1], [0, 0], [1, 1], [0, 1]],
    '⢭': [ [1, 1], [0, 0], [1, 1], [0, 1]],
    '⢮': [ [0, 1], [1, 0], [1, 1], [0, 1]],
    '⢯': [ [1, 1], [1, 0], [1, 1], [0, 1]],
    '⣨': [ [0, 1], [0, 0], [0, 1], [1, 1]],
    '⣩': [ [1, 1], [0, 0], [0, 1], [1, 1]],
    '⣪': [ [0, 1], [1, 0], [0, 1], [1, 1]],
    '⣫': [ [1, 1], [1, 0], [0, 1], [1, 1]],
    '⣬': [ [0, 1], [0, 0], [1, 1], [1, 1]],
    '⣭': [ [1, 1], [0, 0], [1, 1], [1, 1]],
    '⣮': [ [0, 1], [1, 0], [1, 1], [1, 1]],
    '⣯': [ [1, 1], [1, 0], [1, 1], [1, 1]],
    '⢰': [ [0, 0], [0, 1], [0, 1], [0, 1]],
    '⢱': [ [1, 0], [0, 1], [0, 1], [0, 1]],
    '⢲': [ [0, 0], [1, 1], [0, 1], [0, 1]],
    '⢳': [ [1, 0], [1, 1], [0, 1], [0, 1]],
    '⢴': [ [0, 0], [0, 1], [1, 1], [0, 1]],
    '⢵': [ [1, 0], [0, 1], [1, 1], [0, 1]],
    '⢶': [ [0, 0], [1, 1], [1, 1], [0, 1]],
    '⢷': [ [1, 0], [1, 1], [1, 1], [0, 1]],
    '⣰': [ [0, 0], [0, 1], [0, 1], [1, 1]],
    '⣱': [ [1, 0], [0, 1], [0, 1], [1, 1]],
    '⣲': [ [0, 0], [1, 1], [0, 1], [1, 1]],
    '⣳': [ [1, 0], [1, 1], [0, 1], [1, 1]],
    '⣴': [ [0, 0], [0, 1], [1, 1], [1, 1]],
    '⣵': [ [1, 0], [0, 1], [1, 1], [1, 1]],
    '⣶': [ [0, 0], [1, 1], [1, 1], [1, 1]],
    '⣷': [ [1, 0], [1, 1], [1, 1], [1, 1]],
    '⢸': [ [0, 1], [0, 1], [0, 1], [0, 1]],
    '⢹': [ [1, 1], [0, 1], [0, 1], [0, 1]],
    '⢺': [ [0, 1], [1, 1], [0, 1], [0, 1]],
    '⢻': [ [1, 1], [1, 1], [0, 1], [0, 1]],
    '⢼': [ [0, 1], [0, 1], [1, 1], [0, 1]],
    '⢽': [ [1, 1], [0, 1], [1, 1], [0, 1]],
    '⢾': [ [0, 1], [1, 1], [1, 1], [0, 1]],
    '⢿': [ [1, 1], [1, 1], [1, 1], [0, 1]],
    '⣸': [ [0, 1], [0, 1], [0, 1], [1, 1]],
    '⣹': [ [1, 1], [0, 1], [0, 1], [1, 1]], 
    '⣺': [ [0, 1], [1, 1], [0, 1], [1, 1]],
    '⣻': [ [1, 1], [1, 1], [0, 1], [1, 1]],
    '⣼': [ [0, 1], [0, 1], [1, 1], [1, 1]],
    '⣽': [ [1, 1], [0, 1], [1, 1], [1, 1]],
    '⣾': [ [0, 1], [1, 1], [1, 1], [1, 1]],
    '⣿': [ [1, 1], [1, 1], [1, 1], [1, 1]],
    }

create_pixel_art()
timeEnd = time.time()

elapsedTime = timeEnd - timeStart
print("Time elapsed: " + str(elapsedTime) + " s")
